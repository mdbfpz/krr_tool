#5.6 Execute Aircraftâ€™s Plan 

#5.6.1 Detect aircraft that have to climb/descend to requested FL
[?flight, :atRequestedFL] :-
    [?flight, :currentElement, ?currElement],
    [?currElement,fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?flightLevel],
    [?currElement,fx:routeChange, ?currRouteChanges],
    [?currRouteChanges,fx:level, ?currCruisingLevelChange],
    [?currCruisingLevelChange,fx:level, ?flightLevel].

[?flight, :isAtRequestedFL,1] :- [?flight, :atRequestedFL].
[?flight, :isAtRequestedFL,0] :- NOT[?flight, :atRequestedFL].

[?flight, :descendFL] :-
    [?flight, :currentElement, ?currElement],
    [?currElement,fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currFlightLevel],
    [?currElement,fx:routeChange, ?currRouteChanges],
    [?currRouteChanges,fx:level, ?currCruisingLevelChange],
    [?currCruisingLevelChange,fx:level, ?reqFlightLevel],
    FILTER(?currFlightLevel > ?reqFlightLevel).

[?flight, :hasToDescendFL,1] :- [?flight, :descendFL].
[?flight, :hasToDescendFL,0] :- NOT[?flight, :descendFL].

[?flight, :hasToClimbFL,1] :- 
    [?flight, :isAtRequestedFL,0],
    [?flight, :hasToDescendFL,0].
    
#DeMorgan
[?flight, :hasToClimbFL,0] :- 
    NOT(
    NOT[?flight, :isAtRequestedFL,1],
    NOT[?flight, :hasToDescendFL,1]
    ).

#5.6.2 Detect aircraft that have to climb/descend to exit FL 

[?flight, :atExitFL] :-
    [?flight, :currentElement, ?currElement],
    [?currElement,fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?flightLevel],
    [?flight, :exitPointElement, ?exitPointElement],
    [?exitPointElement, fx:point4D, ?exitPoint4D],
    [?exitPoint4D, fx:level, ?flightLevel].

[?flight, :isAtExitFL,1] :- [?flight, :atExitFL].
[?flight, :isAtExitFL,0] :- NOT[?flight, :atExitFL].

[?flight, :descendToExitFL] :-
    [?flight, :currentElement, ?currElement],
    [?currElement,fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currFlightLevel],
    [?flight, :exitPointElement, ?exitPointElement],
    [?exitPointElement, fx:point4D, ?exitPoint4D],
    [?exitPoint4D, fx:level, ?exitFlightLevel],
    FILTER(?currFlightLevel > ?exitFlightLevel).

[?flight, :hasToDescendToExitFL,1] :- [?flight, :descendToExitFL].
[?flight, :hasToDescendToExitFL,0] :- NOT[?flight, :descendToExitFL].

[?flight, :hasToClimbToExitFL,1] :- 
    [?flight, :isAtExitFL,0],
    [?flight, :hasToDescendToExitFL,0].
    
#DeMorgan
[?flight, :hasToClimbToExitFL,0] :- 
    NOT(
    NOT[?flight, :isAtExitFL,1],
    NOT[?flight, :hasToDescendToExitFL,1]
    ).

#5.6.3 Detect aircraft that will reach top of descent within the Sector (ML module)   - not implemented in Java

#5.6.4 Detect if planned trajectory passes through restricted airspace

#trebam military sector west i east
[?flight, :plannedTrajectoryPassesThroughWestRestrictedAirspace]:-
    [?flight, :westMilitaryAirspace, ?airspace]
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :withinSector, ?sector],
    [?flight, :withinSectorVertically, ?sector], #linije 79 i 141 provjeravaju to u javi
    [?airspace, ax:activation, ?airspaceActivation],
    [?airspaceActivation, ax:timeInterval, ?timesheet],
    [?timesheet, ax:startTime, ?startTime],
    [?timesheet, ax:endTime, ?endTime],
    [?flight, fx:current, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],
    """gledamo kao da se pretvorba headinga obavlja u pipelineu
       linija 60 - linija 86
    """
    [?flight, :distanceToIntersectionPoint, ?distToIntersectionPoint], # TODO: implement this in pipeline
    BIND(
        ?currSpeed * 0.514444444
        AS ?currSpeedInMS
    ),

    BIND(
        ?distToIntersectionPoint/?currSpeedInMS
        AS ?b #ovdje je upitno jesu li mi vremena u pogodnom formatu za usporedbu
    ),
    FILTER(?startTime < ?b && ?endTime > ?b).

[?flight, :plannedTrajectoryPassesThroughWestMilitaryAirspace, 1] :- [?flight, :plannedTrajectoryPassesThroughWestRestrictedAirspace].
[?flight, :plannedTrajectoryPassesThroughWestMilitaryAirspace, 0] :- NOT[?flight, :plannedTrajectoryPassesThroughWestRestrictedAirspace].

[?flight, :plannedTrajectoryPassesThroughEastRestrictedAirspace]:-
    [?flight, :eastMilitaryAirspace, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :withinSector, ?sector],
    [?flight, :withinSectorVertically, ?sector],
    [?airspace, ax:activation, ?airspaceActivation],
    [?airspaceActivation, ax:timeInterval, ?timesheet],
    [?timesheet, ax:startTime, ?startTime],
    [?timesheet, ax:endTime, ?endTime],
    [?flight, fx:current, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],
    [?flight, :distanceToIntersectionPoint, ?distToIntersectionPoint], # TODO: implement this in pipeline
    BIND(
        ?currSpeed * 0.514444444
        AS ?currSpeedInMS
    ),
    BIND(
        ?distToIntersectionPoint/?currSpeedInMS
        AS ?b
    ),
    FILTER(?startTime < ?b && ?endTime > ?b).

[?flight, :plannedTrajectoryPassesThroughEastMilitaryAirspace, 1] :- [?flight, :plannedTrajectoryPassesThroughEastRestrictedAirspace].
[?flight, :plannedTrajectoryPassesThroughEastMilitaryAirspace, 0] :- NOT[?flight, :plannedTrajectoryPassesThroughEastRestrictedAirspace].


