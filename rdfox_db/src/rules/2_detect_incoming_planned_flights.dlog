# TODO: add ?indicator to all helper rules?
[?flight, :isAircraftAlreadyAssumed, ?aircraftAlreadyAssumedIndicator] :-
    [?flight, fx:coordinationStatus, ?coordStatus],
    [?coordStatus, fx:status, ?statusValue],
    BIND(
        IF(
            ?statusValue = "ASSUMED",
            1,
            0
        )
        AS ?aircraftAlreadyAssumedIndicator
    ).


[?flight, :isAircraftAlreadyTransferred, ?aircraftAlreadyTransferredIndicator] :-
    [?flight, fx:coordinationStatus, ?coordStatus],
    [?coordStatus, fx:status, ?statusValue],
    BIND(
        IF(
            ?statusValue = "TRANSFERRED",
            1,
            0
        )
        AS ?aircraftAlreadyTransferredIndicator
    ).

"""
This checks that the aircraft's current position is within the given sector's upper and lower limit.
"""
[?flight, :withinSectorVertically, ?sector]
    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],

    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?sector, ax:upperLimit, ?upperLimit],

    FILTER(
        ?currLevel <= ?upperLimit*100 && 
        ?currLevel >= ?lowerLimit*100
    ).

"""
This checks that the planned route point is within the given sector's upper and lower limit.
"""
"""[?flight, :plannedPointWithinSectorVertically, ?sector]
    [?flight, :agreedElement, ?plannedElement],
    [?plannedElement, fx:point4D, ?plannedPoint4D],
    [?plannedPoint4D, fx:level, ?plannedLevel],

    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?sector, ax:upperLimit, ?upperLimit],

    FILTER(?plannedLevel <= ?upperLimit*100),
    FILTER(?plannedLevel >= ?lowerLimit*100)."""

"""
This checks that the aircraft's current position is within the 3D sector - both horizontally and vertically.
"""
[?flight, :withinSector, ?sector] :-
    [?flight, :withinSectorHorizontally, ?sector], # TODO: ovo implementirati u pipelineu (je li točka unutar poligona)
    [?flight, :withinSectorVertically, ?sector].

"""
This checks that the aircraft's planned route point is within the 3D sector - both horizontally and vertically.
"""
"""[?flight, :plannedPointWithinSector, ?sector] :-
    [?flight, :plannedPointWithinSectorHorizontally, ?sector], # TODO: ovo implementirati u pipelineu (je li točka unutar poligona)
    [?flight, :plannedPointWithinSectorVertically, ?sector]."""


# 5.2.1. Check that aircraft is close to Sector boundary
[?flight, :aircraftCloseToSectorBoundary, ?sector] :-
    [?flight, :isAircraftAlreadyAssumed, 0],
    [?flight, :isAircraftAlreadyTransferred, 0],
    NOT [?flight, :withinSector, ?sector],
    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],
    [?flight, :distanceToClosestHorizontalBoundary, ?minDist], # Horizontal distance to 2D sector - TODO: iskoristiti gotov kod iz jave i ubaciti u pipeline

    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?sector, ax:upperLimit, ?upperLimit],

    BIND (
        ?minDist/(?currSpeed*0.514444444) # Speed in knots, converted to m/s - time is in seconds
        AS ?timeToReachSector
    ),
    BIND(
        MINFN(
            ABS(?upperLimit*100 - ?currLevel), ABS(?lowerLimit*100 - ?currLevel)
        )
        AS ?verticalDistanceToSector
    ),
    FILTER(
        # 5 minutes away
        ?timeToReachSector <= 5*60 ||
        ?verticalDistanceToSector <= 1000
    ).

# When the aircraft is planned:
[?flight, :plannedAircraftCloseToSectorBoundary, ?sector] :-
    [?flight, :isAircraftPlanned, 1],   # Task 5.3.2 output
    [?flight, :aircraftCloseToSectorBoundary, ?sector].

# When the aircraft is not planned:
[?flight, :notPlannedAircraftCloseToSectorBoundary, ?sector] :-
    [?flight, :isAircraftPlanned, 0],   # Task 5.3.2 output
    [?flight, :aircraftCloseToSectorBoundary, ?sector].

[?flight, :aircraftNotCloseToSectorBoundary, ?sector] :-
    NOT [?flight, :plannedAircraftCloseToSectorBoundary, ?sector],
    NOT [?flight, :notPlannedAircraftCloseToSectorBoundary, ?sector].


# 5.2.2. Check that aircraft is approaching Sector boundary
[?flight2, :aircraftApproachingToSectorBoundary, ?sector] :-
    # Identify consecutive timestamps
    [?prevT, :next, ?currT],  
    # Bind flights at each timestamp
    [?prevT, :flight, ?flight1],
    [?currT, :flight, ?flight2],
    # Extract the same flights only
    [?flight1, :aircraftIdentification, ?flightID],
    [?flight2, :aircraftIdentification, ?flightID],

    # Extract previous and current elements for the flight at each timestamp
    [?flight1, :currentElement, ?prevElement],
    [?flight2, :currentElement, ?currElement],

    [?flight2, :isAircraftAlreadyAssumed, 0],
    [?flight2, :isAircraftAlreadyTransferred, 0],
    NOT [?flight2, :withinSector, ?sector],
    
    # Extract previous and current positions and flight levels
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:position, ?currPosition],
    [?currPosition, fx:pos, ?currLatLon],
    [?currLatLon, fx:lat, ?currLat],
    [?currLatLon, fx:lon, ?currLon],
    [?currPoint4D, fx:level, ?currLevel],
    [?flight2, :distanceToClosestHorizontalBoundary, ?currMinDist], # Horizontal distance to sector

    [?prevElement, fx:point4D, ?prevPoint4D],
    [?prevPoint4D, fx:position, ?prevPosition],
    [?prevPosition, fx:pos, ?prevLatLon],
    [?prevLatLon, fx:lat, ?prevLat],
    [?prevLatLon, fx:lon, ?prevLon],
    [?prevPoint4D, fx:level, ?prevLevel],
    [?flight1, :distanceToClosestHorizontalBoundary, ?prevMinDist], # Horizontal distance to sector

    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?sector, ax:upperLimit, ?upperLimit],

    BIND(
        MINFN(
            ABS(?upperLimit*100 - ?currLevel), 
            ABS(?lowerLimit*100 - ?currLevel)
        )
        AS ?currVerticalDistanceToSector
    ),

    BIND(
        MINFN(
            ABS(?upperLimit*100 - ?prevLevel), 
            ABS(?lowerLimit*100 - ?prevLevel)
        )
        AS ?prevVerticalDistanceToSector
    ),

    FILTER(
        ?currMinDist < ?prevMinDist ||
        ?currVerticalDistanceToSector < ?prevVerticalDistanceToSector
    ).

# When the aircraft is planned:
[?flight, :plannedAircraftApproachingToSectorBoundary, ?sector] :-
    [?flight, :isAircraftPlanned, 1],   # Task 5.3.2 output,
    [?flight, :aircraftApproachingToSectorBoundary, ?sector].

# When the aircraft is not planned:
[?flight, :notPlannedAircraftApproachingToSectorBoundary, ?sector] :-
    [?flight, :isAircraftPlanned, 0],   # Task 5.3.2 output,
    [?flight, :aircraftApproachingToSectorBoundary, ?sector].

[?flight, :aircraftNotApproacingToSectorBoundary, ?sector] :-
    NOT [?flight, :plannedAircraftApproachingToSectorBoundary, ?sector],
    NOT [?flight, :notPlannedAircraftApproachingToSectorBoundary, ?sector].


# 5.2.3. Check that aircraft’s altitude is within the altitude band of the Sector
# When the aircraft is planned:
[?flight, :plannedAircraftAltitudeWithinSectorBandAltitude, ?sector] :-
    [?flight, :isAircraftPlanned, 1],   # Task 5.3.2 output,
    [?flight, :withinSectorVertically, ?sector].

# When the aircraft is not planned:
[?flight, :notPlannedAircraftAltitudeWithinSectorBandAltitude, ?sector] :-
    [?flight, :isAircraftPlanned, 0],   # Task 5.3.2 output,
    [?flight, :withinSectorVertically, ?sector].

[?flight, :aircraftAltitudeNotWithinSectorBandAltitude, ?sector] :-
    NOT [?flight, :plannedAircraftAltitudeWithinSectorBandAltitude, ?sector],
    NOT [?flight, :notPlannedAircraftAltitudeWithinSectorBandAltitude, ?sector].


# 5.2.4. Check that aircraft’s altitude is approaching the Sector altitude
[?flight2, :approachingSectorAltitude, ?sector] :-
    # Identify consecutive timestamps
    [?prevT, :next, ?currT],  
    # Bind flights at each timestamp
    [?prevT, :flight, ?flight1],
    [?currT, :flight, ?flight2],
    # Extract the same flights only
    [?flight1, :aircraftIdentification, ?flightID],
    [?flight2, :aircraftIdentification, ?flightID],

    # Extract previous and current elements for the flight at each timestamp
    [?flight1, :currentElement, ?prevElement],
    [?flight2, :currentElement, ?currElement],
   
    # Extract previous and current positions and flight levels
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],

    [?prevElement, fx:point4D, ?prevPoint4D],
    [?prevPoint4D, fx:level, ?prevLevel],

    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?sector, ax:upperLimit, ?upperLimit],

    BIND(
        ABS(?lowerLimit*100 - ?currLevel)
        AS ?currLowerLevelDiff
    ),
    BIND(
        ABS(?upperLimit*100 - ?currLevel)
        AS ?currUpperLevelDiff
    ),
    BIND(
        ABS(?lowerLimit*100 - ?prevLevel)
        AS ?prevLowerLevelDiff
    ),
    BIND(
        ABS(?upperLimit*100 - ?prevLevel)
        AS ?prevUpperLevelDiff
    ),

    FILTER(
        (
            (ABS(?currLowerLevelDiff - ?prevLowerLevelDiff) <= ABS(?currUpperLevelDiff - ?prevUpperLevelDiff)) &&
            ?currLowerLevelDiff < ?prevLowerLevelDiff
        ) ||
        (
            !(
                ABS(?currLowerLevelDiff - ?prevLowerLevelDiff) <= 
                ABS(?currUpperLevelDiff - ?prevUpperLevelDiff) 
            ) &&
            ?currUpperLevelDiff < ?prevUpperLevelDiff
        )
    ).

[?flight, :aircraftWithinSectorVerticallyNotApproachingSectorAltitude, ?sector] :-
    [?flight, fx:currentElement, ?currElement],
    [?currElement, fx:extension, ?currVRate],

    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector]

    FILTER(?verticalRate = 0),
    [?flight, :withinSectorVertically].

[?flight, :aircraftOutsideSectorVerticallyNotApproachingSectorAltitude, ?sector] :-
    [?flight, fx:currentElement, ?currElement],
    [?currElement, fx:extension, ?currVRate],

    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector]

    FILTER(?verticalRate = 0),
    NOT [?flight, :withinSectorVertically].

[?flight, :plannedAircraftIsApproachingSectorAltitude, ?sector] :-
    [?flight, :isAircraftPlanned, 1],   # Task 5.3.2 output
    [?flight, :approachingSectorAltitude, ?sector].

[?flight, :notPlannedAircraftIsApproachingSectorAltitude, ?sector] :-
    [?flight, :isAircraftPlanned, 0],   # Task 5.3.2 output
    [?flight, :approachingSectorAltitude, ?sector].

"""[?flight, :aircraftIsNotApproachingSectorAltitude, ?sector] :-
    NOT [?flight, :plannedAircraftIsApproachingSectorAltitude, ?sector],
    NOT [?flight, :notPlannedAircraftIsApproachingSectorAltitude, ?sector]."""