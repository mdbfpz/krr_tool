@prefix fx: <http://www.fixm.aero/flight/4.3/>.
@prefix fb: <http://www.fixm.aero/base/4.3/>.
@prefix ax: <https://aware-sesar.eu/aixm/5.1.1/>.
@prefix : <https://aware-sesar.eu/>.

# Between each two flights (airplanes) there should be a predicate :conflict with the 
# following structure:

# ?flight1 :conflict ?conflict12.     # Where ?conflict12 is a conflict pair node.
# ?flight2 :conflict ?conflict12.
# ?conflict12 :conflictIndicator ?conflictIndicator.    # Where ?conflictIndicator is 1/0. Is this needed? Maybe leave the conflict branch missing if no conflict.
# ?conflict12 :position ?cpaPosition.    # CPA position.
# ?conflict12 :minimumDistance ?minDist.
# ?conflict12 :distanceToMD ?distToMinDist.
# ?conflict12 :timeToMD ?timeToMinDist.
# ?cpaPosition :latitude ?lat.
# ?cpaPosition :longitude ?long.
# ?cpaPosition :altitude ?alt.

# 5.5.1. Check all aircraft pairs for conflict (ML module)
# No need to implement this. We have a conflict detection module, whose outputs will be 
# directly stored in a graph. To read this information, we just call a corresponding SPARQL 
# query in the pipeline.

# 5.5.2 Check plausibility of the predicted conflicts
# TODO: MISSING speed
[?flight1, :conflictPredictionImplausible, ?flight2] :- 
    # Make sure we look for the flights in the same timestamp
    [?t, fx:flight, ?flight1],
    [?t, fx:flight, ?flight2],

    # Extract the same FlightIdentification for both flights
    [?flight1, fx:flightIdentification, ?ident1],
    [?flight2, fx:flightIdentification, ?ident2],
    [?ident1, fb:aircraftIdentification, ?flight1ID],
    [?ident2, fb:aircraftIdentification, ?flight2ID],

    FILTER(?flight1ID != ?flight2ID),

    [?flight1, :conflict, ?conflict12],
    [?flight2, :conflict, ?conflict12],
    [?conflict12, :distanceToMD, ?distToMinDist],
    [?conflict12, :timeToMD, ?timeToMinDist],

    [?flight1, :currentElement, ?currElement1],
    [?flight2, :currentElement, ?currElement2],
    [?currElement1, fx:point4D, ?currPoint4D1],
    [?currPoint4D1, fx:predictedAirspeed, ?currSpeed1], # TODO: change to fx:groundSpeed?
    [?currElement2, fx:point4D, ?currPoint4D2],
    [?currPoint4D2, fx:predictedAirspeed, ?currSpeed2], # TODO: change to fx:groundSpeed?

    BIND(
        ?timeToMinDist*(?currSpeed1/3600)
        AS ?dist1
    ),
    BIND(
        ?timeToMinDist*(?currSpeed2/3600)
        AS ?dist2
    ),
    BIND(5 AS ?distTolerance),

    FILTER(
        !(
            ?dist1 <= ?distToMinDist + ?distTolerance && 
            ?dist1 >= ?distToMinDist - ?distTolerance && 
            ?dist2 <= ?distToMinDist + ?distTolerance && 
            ?dist2 >= ?distToMinDist - ?distTolerance
        )
    ).

[?flight1, :conflictPredictionPlausible, ?flight2] :- 
    # Make sure we look for the flights in the same timestamp
    [?t, fx:flight, ?flight1],
    [?t, fx:flight, ?flight2],

    # Extract the same FlightIdentification for both flights
    [?flight1, fx:flightIdentification, ?ident1],
    [?flight2, fx:flightIdentification, ?ident2],
    [?ident1, fb:aircraftIdentification, ?flight1ID],
    [?ident2, fb:aircraftIdentification, ?flight2ID],

    FILTER(?flight1ID != ?flight2ID),

    # Assure there are conflict information
    [?flight1, :conflict, ?conflict12],
    [?flight2, :conflict, ?conflict12],
    [?conflict12, :distanceToMD, ?distToMinDist],
    [?conflict12, :timeToMD, ?timeToMinDist],

    NOT [?flight1, :conflictPredictionImplausible, ?flight2].


# 5.5.3. Check which conflicts are to occur within the sector   # [DONE]
[?conflict, :conflictWithinSectorVertically, ?sector] :-
    [?conflict, fx:position, ?cpaPosition],
    [?cpaPosition, fb:pos, ?cpaPos],
    [?cpaPos, fb:altitude, ?alt],

    BIND(
        ?alt/100 AS ?altFL  # Convert Feet to FL
    ),

    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?lowerLimit, :limitValue, ?lowerLimitValue],
    [?lowerLimit, :limitUoM, ?lowerLimitUoM],
    [?sector, ax:upperLimit, ?upperLimit],
    [?upperLimit, :limitValue, ?upperLimitValue],
    [?upperLimit, :limitUoM, ?upperLimitUoM],

    BIND(
        IF(
            ?lowerLimitUoM = "VERTICAL_UOM_FEET",
            ?lowerLimitValue/100, # Convert to FL
            ?lowerLimitValue # Already in FL
        )
        AS ?lowerValue
    ),

    BIND(
        IF(
            ?upperLimitUoM = "VERTICAL_UOM_FEET",
            ?upperLimitValue/100, # Convert to FL
            ?upperLimitValue # Already in FL
        )
        AS ?upperValue
    ),

    FILTER(
        ?altFL <= ?upperValue && 
        ?altFL >= ?lowerValue
    ).

[?conflict, :conflictWithinSector, ?sector] :-
    [?conflict, :conflictWithinSectorHorizontally, ?sector],
    [?conflict, :conflictWithinSectorVertically, ?sector].


# TODO: napravit novo pravilo koje Ä‡e gledati jel konflikt unutar buffera


# 5.5.4. Categorize conflicts based on urgency  # [DONE]
[?conflict, :conflictUrgency, ?urgency] :-
    [?conflict, :conflictIndicator, 1],
    [?conflict, :timeToMD, ?timeToMD],

    BIND(?timeToMD/60 AS ?timeToMDInMinutes),
    BIND(
        IF(
            ?timeToMDInMinutes < 2, 
            "high",
            IF(
                ?timeToMDInMinutes <= 5,
                "medium",
                "low"
            )
        )
        AS ?urgency
    ).


# TODO: rules below are not needed since we won't have this statistics data
# 5.5.5. Check if conflict pair aircraft data matches ML conflict module metadata
#
# [?flight, :headingWithinSigmaBand, ?indicator] :-
#     [?flight, :conflict, ?conflict],
#     [?flight, fx:flightIdentification, ?ident],
#     [?ident, fb:aircraftIdentification, ?flightID],
#     [?flight, :currentElement, ?currElement],
#     [?currElement, fx:point4D, ?currPoint4D],
#     [?currPoint4D, fx:level, ?currLevel],
#     [?currLevel, fb:flightLevel, ?currFL],
#     
#     [?statistics, :statsFlight, ?flightStats],
#     [?flightStats, fb:aircraftIdentification, ?flightID],
#     
#     [?flightStats, :altStd, ?altStd],
#     [?flightStats, :altMean, ?altMean],
# 
#     BIND(
#         IF(
#             ?currFL >= (?altMean - ?altStd) mod 360 && 
#             ?currFL <= (?altMean + ?altStd) mod 360,
#             1,
#             0
#         )
#         AS ?indicator
#     ).
#
# [?flight, :headingWithinSigmaBand, ?indicator] :-
#     [?flight, :conflict, ?conflict],
#     [?flight, fx:flightIdentification, ?ident],
#     [?ident, fb:aircraftIdentification, ?flightID],
#     [?flight, :currentElement, ?currElement],
#     [?currElement, fx:point4D, ?currPoint4D],
#     [?currPoint4D, fx:level, ?currLevel],
#     [?currLevel, fb:flightLevel, ?currFL],
#     
#     [?statistics, :statsFlight, ?flightStats],
#     [?flightStats, fb:aircraftIdentification, ?flightID],
# 
#     [?flightStats, :altStd, ?altStd],
#     [?flightStats, :altMean, ?altMean],
#
#     BIND(
#         IF(
#             ?currFL >= (?altMean - 2*?altStd) mod 360 && 
#             ?currFL <= (?altMean + 2*?altStd) mod 360,
#             2,
#             0
#         )
#         AS ?indicator
#     ).
#
# [?flight, :headingWithinSigmaBand, ?indicator] :-
#     [?flight, :conflict, ?conflict],
#     [?flight, fx:flightIdentification, ?ident],
#     [?ident, fb:aircraftIdentification, ?flightID],
#     [?flight, :currentElement, ?currElement],
#     [?currElement, fx:point4D, ?currPoint4D],
#     [?currPoint4D, fx:level, ?currLevel],
#     [?currLevel, fb:flightLevel, ?currFL],
#  
#     [?statistics, :statsFlight, ?flightStats],
#     [?flightStats, fb:aircraftIdentification, ?flightID],
#
#     [?flightStats, :altStd, ?altStd],
#     [?flightStats, :altMean, ?altMean],
#
#     BIND(
#         IF(
#             ?currFL >= (?altMean - 3*?altStd) mod 360 && 
#             ?currFL <= (?altMean + 3*?altStd) mod 360,
#             3,
#             0
#         )
#         AS ?indicator
#     ).
#
#
# [?flight, :headingOutside3SigmaBand, ?indicator] :-
#     [?flight, :conflict, ?conflict],
#     [?flight, fx:flightIdentification, ?ident],
#     [?ident, fb:aircraftIdentification, ?flightID],
#     [?flight, :currentElement, ?currElement],
#     [?currElement, fx:point4D, ?currPoint4D],
#     [?currPoint4D, fx:level, ?currLevel],
#     [?currLevel, fb:flightLevel, ?currFL],  #TODO: treba li ovo?
#     [?statistics, :statsFlight, ?flightStats],
#     [?flightStats, fb:aircraftIdentification, ?flightID],
#
#     [?flightStats, :altStd, ?altStd],
#     [?flightStats, :altMean, ?altMean],
#
#     [?flight, :headingWithinSigmaBand, ?indicator],
#     BIND(
#         IF(
#             ?indicator != 3,
#             1,
#             0
#         )
#         AS ?indicator
#     ).
#
# TODO: How to say which non-heading parameter is within sigma band?
# [?flight, :nonHeadingParameterWithinSigmaBand, ?indicator] :-
#     [?flight, :conflict, ?conflict],
#     [?flight, fx:flightIdentification, ?ident],
#     [?ident, fb:aircraftIdentification, ?flightID],
#     [?flight, :currentElement, ?currElement],
#     [?currElement, fx:point4D, ?currPoint4D],
#     [?currPoint4D, fx:level, ?currLevel],
#     [?currLevel, fb:flightLevel, ?currFL],
#    
#     [?statistics, :statsFlight, ?flightStats],
#     [?flightStats, fb:aircraftIdentification, ?flightID],
#
#     [?flightStats, :altStd, ?altStd],
#     [?flightStats, :altMean, ?altMean],
#
#     BIND(
#         IF(
#             ?currFL >= (?altMean - ?altStd) && ?currFL <= (?altMean + ?altStd),
#             1,
#             0
#         )
#         AS ?indicator
#     ).
#
# [?flight, :nonHeadingParameterWithinSigmaBand, ?indicator] :-
#     [?flight, :conflict, ?conflict],
#     [?flight, fx:flightIdentification, ?ident],
#     [?ident, fb:aircraftIdentification, ?flightID],
#     [?flight, :currentElement, ?currElement],
#     [?currElement, fx:point4D, ?currPoint4D],
#     [?currPoint4D, fx:level, ?currLevel],
#     [?currLevel, fb:flightLevel, ?currFL],
#     
#     [?statistics, :statsFlight, ?flightStats],
#     [?flightStats, fb:aircraftIdentification, ?flightID],
# 
#     [?flightStats, :altStd, ?altStd],
#     [?flightStats, :altMean, ?altMean],
# 
#     BIND(
#         IF(
#             ?currFL >= (?altMean - 2*?altStd) && ?currFL <= (?altMean + 2*?altStd),
#             2,
#             0
#         )
#         AS ?indicator
#     ).
#
# [?flight, :nonHeadingParameterWithinSigmaBand, ?indicator] :-
#     [?flight, :conflict, ?conflict],
#     [?flight, fx:flightIdentification, ?ident],
#     [?ident, fb:aircraftIdentification, ?flightID],
#     [?flight, :currentElement, ?currElement],
#     [?currElement, fx:point4D, ?currPoint4D],
#     [?currPoint4D, fx:level, ?currLevel],
#     [?currLevel, fb:flightLevel, ?currFL],
#     
#     [?statistics, :statsFlight, ?flightStats],
#     [?flightStats, fb:aircraftIdentification, ?flightID],
# 
#     [?flightStats, :altStd, ?altStd],
#     [?flightStats, :altMean, ?altMean],
# 
#     BIND(
#         IF(
#             ?currFL >= (?altMean - 3*?altStd) && ?currFL <= (?altMean + 3*?altStd),
#             3,
#             0
#         )
#         AS ?indicator
#     ).
#
# [?flight, :nonHeadingParameterOutside3SigmaBand, ?indicator] :-
#     [?flight, :conflict, ?conflict],
#     [?flight, fx:flightIdentification, ?ident],
#     [?ident, fb:aircraftIdentification, ?flightID],
#     [?flight, :currentElement, ?currElement],
#     [?currElement, fx:point4D, ?currPoint4D],
#     [?currPoint4D, fx:level, ?currLevel],
#     [?currLevel, fb:flightLevel, ?currFL],  #TODO: treba li ovo?
#     [?statistics, :statsFlight, ?flightStats],
#     [?flightStats, fb:aircraftIdentification, ?flightID],
# 
#     [?flightStats, :altStd, ?altStd],
#     [?flightStats, :altMean, ?altMean],
# 
#     [?flight, :nonHeadingParameterWithinSigmaBand, ?indicator],
#     BIND(
#         IF(
#             ?indicator != 3,#ne znam ako je legalno: NOT [?flight, :nonHeadingParameterWithinSigmaBand, 3],
#             1,
#             0
#         )
#         AS ?indicator
#     ).
#
# [?flight, :positionWithinBoundingBox, ?indicator] :-    # TODO ne treba
#     [?flight, :conflict, ?conflict],
#     [?flight, fx:flightIdentification, ?ident],
#     [?ident, fb:aircraftIdentification, ?flightID],
#     [?flight, :currentElement, ?currElement],
#     [?currElement, fx:point4D, ?currPoint4D],
#     [?currPoint4D, fx:position, ?currPosition],
#     [?currPosition, fb:pos, ?currPoint],
#     [?currPoint, fb:lat, ?currLat],
#     [?currPoint, fb:lon, ?currLon],
#     
#     [?statistics, :statsFlight, ?flightStats],
#     [?flightStats, fb:aircraftIdentification, ?flightID],
#     
#     [?flightStats, :latMax, ?latMax],
#     [?flightStats, :latMin, ?latMin],
#     [?flightStats, :lonMax, ?lonMax],
#     [?flightStats, :lonMin, ?lonMin],
# 
#     BIND(
#         IF(
#             ?currLat >= ?latMin && ?currLat <= ?latMax && 
#             ?currLon >= ?lonMin && ?currLon <= ?lonMax,
#             1,
#             0
#         ) 
#         AS ?indicator
#     ).