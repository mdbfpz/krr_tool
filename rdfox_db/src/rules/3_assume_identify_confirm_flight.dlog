@prefix fx: <http://www.fixm.aero/flight/4.3/>.
@prefix fb: <http://www.fixm.aero/base/4.3/>.
@prefix ax: <https://aware-sesar.eu/aixm/5.1.1/>.
@prefix : <https://aware-sesar.eu/>.

# 5.3.1 Check that aircraft is incoming
# TODO: MISSING speed

# Incoming vertically:
[?flight2, :aircraftIncomingVerticallyFromAbove, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:upperLimit, ?upperLimit],
    [?upperLimit, :limitValue, ?upperLimitValue],
    [?upperLimit, :limitUoM, ?upperLimitUoM],

    BIND(
        IF(
            ?upperLimitUoM = "VERTICAL_UOM_FEET",
            ?upperLimitValue/100, # Convert to FL
            ?upperLimitValue # Already in FL
        )
        AS ?upperValue
    ),

    [?flight, :withinSectorHorizontally, ?sector],
    NOT [?flight, :withinSectorVertically, ?sector],

    # Identify consecutive timestamps
    [?prevT, :next, ?currT],  
    # Bind flights at each timestamp
    [?prevT, fx:flight, ?flight1],
    [?currT, fx:flight, ?flight2],
    # Extract the same FlightIdentification for both flights
    [?flight1, fx:flightIdentification, ?ident1],
    [?flight2, fx:flightIdentification, ?ident2],
    [?ident1, fb:aircraftIdentification, ?flightID],
    [?ident2, fb:aircraftIdentification, ?flightID],

    # Extract previous and current elements for the flight at each timestamp
    [?flight1, :currentElement, ?prevElement],
    [?flight2, :currentElement, ?currElement],

    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:position, ?currPosition],
    [?currPosition, fb:pos, ?currPoint],
    [?currPoint, fb:lat, ?currLat],
    [?currPoint, fb:lon, ?currLon],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],
    [?currPoint4D, :verticalRate, ?currVRate],

    [?prevElement, fx:point4D, ?prevPoint4D],
    [?prevPoint4D, fx:position, ?prevPosition],
    [?prevPosition, fb:pos, ?prevPoint],
    [?prevPoint, fb:lat, ?prevLat],
    [?prevPoint, fb:lon, ?prevLon],

    [?flight2, :distanceToClosestHorizontalBoundary, ?currMinDist], # Horizontal distance to sector
    [?flight1, :distanceToClosestHorizontalBoundary, ?prevMinDist],

    BIND(
        ?currMinDist/(?currSpeed*0.514444444)
        AS ?timeToReachSector
    ),
    BIND(
        ABS((?currFL - ?upperValue)/?timeToReachSector)*60 # ft/min
        AS ?v   # TODO: provjeriti je li u javi ovo dobro!
    ),
    FILTER(
        ?currFL > ?upperValue &&
        ?currVRate < 0 &&
        ABS(?currVRate) >= ?v # TODO: provjeriti je li u javi ovo dobro!
    ).

[?flight2, :aircraftIncomingVerticallyFromBelow, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?lowerLimit, :limitValue, ?lowerLimitValue],
    [?lowerLimit, :limitUoM, ?lowerLimitUoM],

    BIND(
        IF(
            ?lowerLimitUoM = "VERTICAL_UOM_FEET",
            ?lowerLimitValue/100, # Convert to FL
            ?lowerLimitValue # Already in FL
        )
        AS ?lowerValue
    ),

    [?flight, :withinSectorHorizontally, ?sector],
    NOT [?flight, :withinSectorVertically, ?sector],

    # Identify consecutive timestamps
    [?prevT, :next, ?currT],  
    # Bind flights at each timestamp
    [?prevT, fx:flight, ?flight1],
    [?currT, fx:flight, ?flight2],
    # Extract the same FlightIdentification for both flights
    [?flight1, fx:flightIdentification, ?ident1],
    [?flight2, fx:flightIdentification, ?ident2],
    [?ident1, fb:aircraftIdentification, ?flightID],
    [?ident2, fb:aircraftIdentification, ?flightID],

    # Extract previous and current elements for the flight at each timestamp
    [?flight1, :currentElement, ?prevElement],
    [?flight2, :currentElement, ?currElement],

    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:position, ?currPosition],
    [?currPosition, fb:pos, ?currPoint],
    [?currPoint, fb:lat, ?currLat],
    [?currPoint, fb:lon, ?currLon],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],
    [?currPoint4D, :verticalRate, ?currVRate],

    [?prevElement, fx:point4D, ?prevPoint4D],
    [?prevPoint4D, fx:position, ?prevPosition],
    [?prevPosition, fb:pos, ?prevPoint],
    [?prevPoint, fb:lat, ?prevLat],
    [?prevPoint, fb:lon, ?prevLon],


    [?flight2, :distanceToClosestHorizontalBoundary, ?currMinDist], # Horizontal distance to sector
    [?flight1, :distanceToClosestHorizontalBoundary, ?prevMinDist],

    BIND(
        ?currMinDist/(?currSpeed*0.514444444)
        AS ?timeToReachSector
    ),
    BIND(
        ABS((?currFL - ?lowerValue)/?timeToReachSector)*60 # ft/min
        AS ?v   # TODO: provjeriti je li u javi ovo dobro!
    ),
    FILTER(
        ?currFL < ?lowerValue &&
        ?currVRate > 0 &&
        ABS(?currVRate) >= ?v # TODO: provjeriti je li u javi ovo dobro!
    ).


[?flight, :aircraftNotIncomingVertically, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :currentElement, ?currElement], # Some dummy binding to make the rule valid (using NOT needs positive case)
    NOT [?flight, :aircraftIncomingVerticallyFromAbove, ?sector],
    NOT [?flight, :aircraftIncomingVerticallyFromBelow, ?sector].

[?flight, :aircraftIncomingVertically, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :currentElement, ?currElement], # Some dummy binding to make the rule valid (using NOT needs positive case)
    NOT [?flight, :aircraftNotIncomingVertically, ?sector].
    

# Incoming horizontally:
# TODO: MISSING speed

[?flight2, :aircraftIncomingHorizontallyWhenInSectorVertically, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?lowerLimit, :limitValue, ?lowerLimitValue],
    [?lowerLimit, :limitUoM, ?lowerLimitUoM],
    [?sector, ax:upperLimit, ?upperLimit],
    [?upperLimit, :limitValue, ?upperLimitValue],
    [?upperLimit, :limitUoM, ?upperLimitUoM],

    BIND(
        IF(
            ?lowerLimitUoM = "VERTICAL_UOM_FEET",
            ?lowerLimitValue/100, # Convert to FL
            ?lowerLimitValue # Already in FL
        )
        AS ?lowerValue
    ),

    BIND(
        IF(
            ?upperLimitUoM = "VERTICAL_UOM_FEET",
            ?upperLimitValue/100, # Convert to FL
            ?upperLimitValue # Already in FL
        )
        AS ?upperValue
    ),
    
    NOT [?flight2, :withinSectorHorizontally, ?sector],
    [?flight2, :withinSectorVertically, ?sector],

    # Identify consecutive timestamps
    [?prevT, :next, ?currT],  
    # Bind flights at each timestamp
    [?prevT, fx:flight, ?flight1],
    [?currT, fx:flight, ?flight2],
    # Extract the same FlightIdentification for both flights
    [?flight1, fx:flightIdentification, ?ident1],
    [?flight2, fx:flightIdentification, ?ident2],
    [?ident1, fb:aircraftIdentification, ?flightID],
    [?ident2, fb:aircraftIdentification, ?flightID],

    # Extract previous and current elements for the flight at each timestamp
    [?flight1, :currentElement, ?prevElement],
    [?flight2, :currentElement, ?currElement],

    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:position, ?currPosition],
    [?currPosition, fb:pos, ?currPoint],
    [?currPoint, fb:lat, ?currLat],
    [?currPoint, fb:lon, ?currLon],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],
    [?currPoint4D, :verticalRate, ?currVRate],

    [?prevElement, fx:point4D, ?prevPoint4D],
    [?prevPoint4D, fx:position, ?prevPosition],
    [?prevPosition, fb:pos, ?prevPoint],
    [?prevPoint, fb:lat, ?prevLat],
    [?prevPoint, fb:lon, ?prevLon],

    [?flight2, :distanceToClosestHorizontalBoundary, ?currMinDist], # Horizontal distance to sector
    [?flight1, :distanceToClosestHorizontalBoundary, ?prevMinDist],

    BIND(
        ?currMinDist/(?currSpeed*0.514444444)
        AS ?timeToReachSector
    ),
    BIND(
        ABS((?currFL - ?upperValue)/?timeToReachSector)*60 # ft/min
        AS ?v1   # TODO: provjeriti je li u javi ovo dobro!
    ),
    BIND(
        ABS((?currFL - ?lowerValue)/?timeToReachSector)*60 # ft/min
        AS ?v2   # TODO: provjeriti je li u javi ovo dobro!
    ),

    FILTER(
        # Aircraft is getting closer to the sector boundary
        ?currMinDist < ?prevMinDist &&
        (
            (
                ?currVRate > 0 &&
                ABS(?currVRate) <= ?v1
            ) ||
            (
                ?currVRate < 0 &&
                ABS(?currVRate) <= ?v2
            ) ||
            ?currVRate = 0
        )
    ).

# TODO: MISSING speed
[?flight2, :aircraftIncomingHorizontallyWhenNotInSectorVertically, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?lowerLimit, :limitValue, ?lowerLimitValue],
    [?lowerLimit, :limitUoM, ?lowerLimitUoM],
    [?sector, ax:upperLimit, ?upperLimit],
    [?upperLimit, :limitValue, ?upperLimitValue],
    [?upperLimit, :limitUoM, ?upperLimitUoM],

    BIND(
        IF(
            ?lowerLimitUoM = "VERTICAL_UOM_FEET",
            ?lowerLimitValue/100, # Convert to FL
            ?lowerLimitValue # Already in FL
        )
        AS ?lowerValue
    ),

    BIND(
        IF(
            ?upperLimitUoM = "VERTICAL_UOM_FEET",
            ?upperLimitValue/100, # Convert to FL
            ?upperLimitValue # Already in FL
        )
        AS ?upperValue
    ),

    NOT [?flight2, :withinSectorHorizontally, ?sector],
    NOT [?flight2, :withinSectorVertically, ?sector],

    # Identify consecutive timestamps
    [?prevT, :next, ?currT],  
    # Bind flights at each timestamp
    [?prevT, fx:flight, ?flight1],
    [?currT, fx:flight, ?flight2],
   # Extract the same FlightIdentification for both flights
    [?flight1, fx:flightIdentification, ?ident1],
    [?flight2, fx:flightIdentification, ?ident2],
    [?ident1, fb:aircraftIdentification, ?flightID],
    [?ident2, fb:aircraftIdentification, ?flightID],

    # Extract previous and current elements for the flight at each timestamp
    [?flight1, :currentElement, ?prevElement],
    [?flight2, :currentElement, ?currElement],

    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:position, ?currPosition],
    [?currPosition, fb:pos, ?currPoint],
    [?currPoint, fb:lat, ?currLat],
    [?currPoint, fb:lon, ?currLon],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],
    [?currPoint4D, :verticalRate, ?currVRate],

    [?prevElement, fx:point4D, ?prevPoint4D],
    [?prevPoint4D, fx:position, ?prevPosition],
    [?prevPosition, fb:pos, ?prevPoint],
    [?prevPoint, fb:lat, ?prevLat],
    [?prevPoint, fb:lon, ?prevLon],

    [?flight2, :distanceToClosestHorizontalBoundary, ?currMinDist], # Horizontal distance to sector
    [?flight1, :distanceToClosestHorizontalBoundary, ?prevMinDist],

    BIND(
        ?currMinDist/(?currSpeed*0.514444444)
        AS ?timeToReachSector
    ),
    BIND(
        ABS((?currFL - ?upperValue)/?timeToReachSector)*60 # ft/min
        AS ?v1   # TODO: provjeriti je li u javi ovo dobro!
    ),
    BIND(
        ABS((?currFL - ?lowerValue)/?timeToReachSector)*60 # ft/min
        AS ?v2   # TODO: provjeriti je li u javi ovo dobro!
    ),

    FILTER(
        # Aircraft is getting closer to the sector boundary
        ?currMinDist < ?prevMinDist &&
        (
            (
                ?currFL > ?upperValue &&
                ?currVRate < 0 &&
                ABS(?currVRate) >= ?v1
            ) ||
            (
                ?currFL < ?lowerValue &&
                ?currVRate > 0 &&
                ABS(?currVRate) >= ?v2
            )
        )
    ).

[?flight, :aircraftNotIncomingHorizontally, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :currentElement, ?currElement], # Some dummy binding to make the rule valid (using NOT needs positive case)
    NOT [?flight, :aircraftIncomingHorizontallyWhenInSectorVertically, ?sector],
    NOT [?flight, :aircraftIncomingHorizontallyWhenNotInSectorVertically, ?sector].

[?flight, :aircraftIncomingHorizontally, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :currentElement, ?currElement], # Some dummy binding to make the rule valid (using NOT needs positive case)
    NOT [?flight, :aircraftNotIncomingHorizontally, ?sector].

# The main rule associated with the task

[?flight, :aircraftNotIncoming, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :currentElement, ?currElement], # Some dummy binding to make the rule valid (using NOT needs positive case)
    NOT [?flight, :aircraftIncomingVertically, ?sector],
    NOT [?flight, :aircraftIncomingHorizontally, ?sector].

[?flight, :aircraftIncoming, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :currentElement, ?currElement], # Some dummy binding to make the rule valid (using NOT needs positive case)
    NOT [?flight, :aircraftNotIncoming, ?sector].


# 5.3.2 Check that aircraft is planned - TODO: pipeline implementation

#The aircraft is planned if any of its planned route points lie within the given sector.
# Za svaku točku rute (plan leta dobijemo cijeli
# prilikom parsiranja) unutar pipelinea provjeriti pripada li sektoru i onda tu informaciju ubaciti u graf, 
# tj. dodati trojku [?flight, :aircraftIsPlanned, ?sector] kad postoji točka na ruti koja se nalazi u danom sektoru ?sector.
# Eventualno, dodati cijeli plan leta u graf i onda napraviti pravilo koje za svaku točku leta provjerava nalazi li se u sektoru. 
# Sve to prije prvog timestampa u sklopu inicijalnih pravila. Tad za let znamo je li planiran. Što ako se plan mijenja?

# 5.3.3 Check that aircraft has sent the initial call (via datalink)
# TODO: MISSING datalink 

[?flight, :aircrafHasSentInitialCall, ?indicator] :-
    [?flight, :datalink, ?datalink],
    [?datalink, :initialCall, ?initCall],
    BIND(
        IF(
            ?initCall = "YES",
            1,
            0
        )
        AS ?indicator
    ).


# 5.3.4 Confirm that aircraft can be assumed
# TODO: MISSING speed
[?flight, :aircraftCanBeAssumedWhenInSectorHorizontallyNotVertically, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?lowerLimit, :limitValue, ?lowerLimitValue],
    [?lowerLimit, :limitUoM, ?lowerLimitUoM],
    [?sector, ax:upperLimit, ?upperLimit],
    [?upperLimit, :limitValue, ?upperLimitValue],
    [?upperLimit, :limitUoM, ?upperLimitUoM],

    BIND(
        IF(
            ?lowerLimitUoM = "VERTICAL_UOM_FEET",
            ?lowerLimitValue/100, # Convert to FL
            ?lowerLimitValue # Already in FL
        )
        AS ?lowerValue
    ),

    BIND(
        IF(
            ?upperLimitUoM = "VERTICAL_UOM_FEET",
            ?upperLimitValue/100, # Convert to FL
            ?upperLimitValue # Already in FL
        )
        AS ?upperValue
    ),

    [?flight, :withinSectorHorizontally, ?sector],
    NOT [?flight, :withinSectorVertically, ?sector],

    # Extract previous and current elements for the flight at each timestamp
    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:position, ?currPosition],
    [?currPosition, fb:pos, ?currPoint],
    [?currPoint, fb:lat, ?currLat],
    [?currPoint, fb:lon, ?currLon],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],
    [?currPoint4D, :verticalRate, ?currVRate],

    [?flight, :distanceToClosestHorizontalBoundary, ?currMinDist], # Horizontal distance to sector

    BIND(
        IF(
            ?currFL > ?upperValue,
            ?currFL - ?upperValue,
            ?lowerValue - ?currFL
        )
        AS ?distToVerticalLimit
    ),
    # TODO: Check in java if the two binds below are ok!
    BIND(
        ?currMinDist/(?currSpeed*0.514444444)
        AS ?timeToReachSector
    ),
    BIND(
        ABS(?distToVerticalLimit/?currVRate) * 60
        AS ?c
    ),
    BIND(2*60 AS ?x),
    BIND(500 AS ?y),

    FILTER(
        ?distToVerticalLimit <= ?y &&
        ?c <= ?timeToReachSector
    ).

[?flight, :aircraftCanBeAssumedWhenInSectorVerticallyNotHorizontally, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    NOT [?flight, :withinSectorHorizontally, ?sector],
    [?flight, :withinSectorVertically, ?sector],

    # Extract previous and current elements for the flight at each timestamp
    #TODO: tu je nešto krivo - nigdje se ne koristi flight level i ne extracta se previous element?
    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],

    [?flight, :distanceToClosestHorizontalBoundary, ?currMinDist], # Horizontal distance to sector

    BIND(2*60 AS ?x),
    BIND(
        ?currMinDist/(?currSpeed*0.514444444)
        AS ?timeToReachSector
    ),

    FILTER(?timeToReachSector <= ?x).

[?flight, :aircraftCanBeAssumedWhenNotInSectorVerticallyAndHorizontally, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?sector, ax:lowerLimit, ?lowerLimit],
    [?lowerLimit, :limitValue, ?lowerLimitValue],
    [?lowerLimit, :limitUoM, ?lowerLimitUoM],
    [?sector, ax:upperLimit, ?upperLimit],
    [?upperLimit, :limitValue, ?upperLimitValue],
    [?upperLimit, :limitUoM, ?upperLimitUoM],

    BIND(
        IF(
            ?lowerLimitUoM = "VERTICAL_UOM_FEET",
            ?lowerLimitValue/100, # Convert to FL
            ?lowerLimitValue # Already in FL
        )
        AS ?lowerValue
    ),

    BIND(
        IF(
            ?upperLimitUoM = "VERTICAL_UOM_FEET",
            ?upperLimitValue/100, # Convert to FL
            ?upperLimitValue # Already in FL
        )
        AS ?upperValue
    ),

    NOT [?flight, :withinSectorHorizontally, ?sector],
    NOT [?flight, :withinSectorVertically, ?sector],

    # Extract previous and current elements for the flight at each timestamp
    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],
    [?currPoint4D, :verticalRate, ?currVRate],

    [?flight, :distanceToClosestHorizontalBoundary, ?currMinDist], # Horizontal distance to sector

    BIND(2*60 AS ?x),
    BIND(500 AS ?y),
    BIND(
        ?currMinDist/(?currSpeed*0.514444444)
        AS ?timeToReachSector
    ),
    BIND(
        IF(
            ?currFL > ?upperValue,
            ?currFL - ?upperValue,
            ?lowerValue - ?currFL
        )
        AS ?distToVerticalLimit
    ),
    BIND(
        ?distToVerticalLimit/?timeToReachSector
        AS ?v
    ),

    FILTER(
        ?timeToReachSector <= ?x &&
        ?distToVerticalLimit <= ?y &&
        ABS(?currVRate) >= ?v * 60 # ft/min
    ).

[?flight, :aircraftCanNotBeAssumed, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :currentElement, ?currElement], # Some dummy binding to make the rule valid (using NOT needs positive case)
    NOT [?flight, :aircraftCanBeAssumedWhenInSectorHorizontallyNotVertically, ?sector],
    NOT [?flight, :aircraftCanBeAssumedWhenInSectorVerticallyNotHorizontally, ?sector],
    NOT [?flight, :aircraftCanBeAssumedWhenNotInSectorVerticallyAndHorizontally, ?sector].

[?flight, :aircraftCanBeAssumed, ?sector] :-
    [?aixmFeatures, :contains, ?airspace],
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :currentElement, ?currElement], # Some dummy binding to make the rule valid (using NOT needs positive case)
    NOT [?flight, :aircraftCanNotBeAssumed, ?sector].