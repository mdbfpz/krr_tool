@prefix fx: <http://www.fixm.aero/flight/4.3/>.
@prefix fb: <http://www.fixm.aero/base/4.3/>.
@prefix : <https://aware-sesar.eu/>.
@prefix ax: <https://aware-sesar.eu/aixm/5.1.1/>.

# 5.4.1. Check that aircraft is flying towards the exit point
[?flight, :isFlyingTowardsExitPoint, ?flyingTowardsExitPointIndicator] :-
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :withinSector, ?sector],

    [?flight, :flyingToClearedPoint, 1], # Task 1.10

    [?flight, :agreedElement, ?clearedElement],
    [?clearedElement, fx:point4D, ?clearedPoint4D],
    [?clearedPoint4D, fx:position, ?clearedPosition],
    [?clearedPosition, fb:pos, ?clearedPos],
    [?clearedPos, fb:lat, ?clearedLat],
    [?clearedPos, fb:lon, ?clearedLon],

    [?flight, fx:enRoute, ?enRoute],
    [?enRoute, fx:boundaryCrossingCoordination, ?boundaryCrossingCoordination],
    [?boundaryCrossingCoordination, fx:position, ?exitPosition],
    [?exitPosition, fb:pos, ?exitPos],
    [?exitPos, fb:lat, ?exitLat],
    [?exitPos, fb:lon, ?exitLon],

    # TODO: Ask Ivan - do we need to have some tolerance (e.g. distance between the points is below some threshold)?
    BIND(
        IF(
            ?clearedLat = ?exitLat && ?clearedLon = ?exitLon,
            1,
            0
        )
        AS ?flyingTowardsExitPointIndicator
    ).


# 5.4.2 Check that aircraft will reach the exit point on the required FL
# TODO: MISSING speed
[?flight, :aircraftWillReachExitPointOnRequiredFL, ?indicator] :-
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :withinSector, ?sector],

    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],

    [?flight, :agreedElement, ?clearedElement],
    [?clearedElement, fx:point4D, ?clearedPoint4D],
    [?clearedPoint4D, fx:level, ?clearedLevel],
    [?clearedLevel, fb:flightLevel, ?clearedFL],

    [?flight, fx:enRoute, ?enRoute],
    [?enRoute, fx:boundaryCrossingCoordination, ?boundaryCrossingCoordination],
    [?boundaryCrossingCoordination, fx:level, ?exitLevel],
    [?exitLevel, fb:flightLevel, ?exitFL],

    [?flight, :distanceToExitPoint, ?distToExitPoint],

    BIND(
        IF(
            ?exitFL = 0, # TODO: perhaps it won't be zero if missing
            ?clearedFL,
            ?exitFL
        )
        AS ?sectorExitFL
    ),
    BIND(
        ?sectorExitFL - ?currFL
        AS ?diffLevel
    ),
    BIND(
        ?currSpeed * 0.514444444
        AS ?currSpeedInMS
    ),
    BIND(
        ?distToExitPoint/?currSpeedInMS
        AS ?timeToExitPoint
    ),
    BIND(
        (?diffLevel/?timeToExitPoint) * 60
        AS ?calculatedVRate
    ),
    BIND(
        IF(
            (?calculatedVRate > 0 && ?calculatedVRate < 800) || 
            (?calculatedVRate < 0 && ?calculatedVRate > -1400) || 
            ?calculatedVRate = 0,
            1,
            0
        ) 
        AS ?indicator
    ).

# TODO: MISSING speed
[?flight, :climbToExitFL, ?indicator] :-
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :withinSector, ?sector],

    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],

    [?flight, :agreedElement, ?clearedElement],
    [?clearedElement, fx:point4D, ?clearedPoint4D],
    [?clearedPoint4D, fx:level, ?clearedLevel],
    [?clearedLevel, fb:flightLevel, ?clearedFL],

    [?flight, fx:enRoute, ?enRoute],
    [?enRoute, fx:boundaryCrossingCoordination, ?boundaryCrossingCoordination],
    [?boundaryCrossingCoordination, fx:level, ?exitLevel],
    [?exitLevel, fb:flightLevel, ?exitFL],

    [?flight, :distanceToExitPoint, ?distToExitPoint],

    BIND(
        IF(
            ?exitFL = 0,
            ?clearedFL,
            ?exitFL
        )
        AS ?sectorExitFL
    ),
    BIND(
        ?sectorExitFL - ?currFL
        AS ?a
    ),
    BIND(
        ?currSpeed * 0.514444444
        AS ?currSpeedInMS
    ),
    BIND(
        ?distToExitPoint/?currSpeedInMS
        AS ?b
    ),
    BIND(
        (?a/?b) * 60
        AS ?calculatedVRate
    ),

    BIND(
        IF(
            ?calculatedVRate >= 800 && ?calculatedVRate <= 1200,
            1,
            0
        ) 
        AS ?indicator
    ).

# TODO: MISSING speed
[?flight, :aircraftWillNotReachExitPointOnRequiredFL, ?indicator] :-
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :withinSector, ?sector],

    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],

    [?flight, :agreedElement, ?clearedElement],
    [?clearedElement, fx:point4D, ?clearedPoint4D],
    [?clearedPoint4D, fx:level, ?clearedLevel],
    [?clearedLevel, fb:flightLevel, ?clearedFL],

    [?flight, fx:enRoute, ?enRoute],
    [?enRoute, fx:boundaryCrossingCoordination, ?boundaryCrossingCoordination],
    [?boundaryCrossingCoordination, fx:level, ?exitLevel],
    [?exitLevel, fb:flightLevel, ?exitFL],

    [?flight, :distanceToExitPoint, ?distToExitPoint],

    BIND(
        IF(
            ?exitFL = 0,
            ?clearedFL,
            ?exitFL
        )
        AS ?sectorExitFL
    ),
    BIND(
        ?sectorExitFL - ?currFL
        AS ?a
    ),
    BIND(
        ?currSpeed * 0.514444444
        AS ?currSpeedInMS
    ),
    BIND(
        ?distToExitPoint/?currSpeedInMS
        AS ?b
    ),
    BIND(
        (?a/?b) * 60
        AS ?calculatedVRate
    ),

    BIND(
        IF(
            ?calculatedVRate > 1200,
            1,
            0
        ) 
        AS ?indicator
    ).

# TODO: MISSING speed
[?flight, :descendToExitFL, ?indicator] :-
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :withinSector, ?sector],

    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],

    [?flight, :agreedElement, ?clearedElement],
    [?clearedElement, fx:point4D, ?clearedPoint4D],
    [?clearedPoint4D, fx:level, ?clearedLevel],
    [?clearedLevel, fb:flightLevel, ?clearedFL],

    [?flight, fx:enRoute, ?enRoute],
    [?enRoute, fx:boundaryCrossingCoordination, ?boundaryCrossingCoordination],
    [?boundaryCrossingCoordination, fx:level, ?exitLevel],
    [?exitLevel, fb:flightLevel, ?exitFL],

    [?flight, :distanceToExitPoint, ?distToExitPoint],

    BIND(
        IF(
            ?exitFL = 0,
            ?clearedFL,
            ?exitFL
        )
        AS ?sectorExitFL
    ),
    BIND(
        ?sectorExitFL - ?currFL
        AS ?a
    ),
    BIND(
        ?currSpeed * 0.514444444
        AS ?currSpeedInMS
    ),
    BIND(
        ?distToExitPoint/?currSpeedInMS
        AS ?b
    ),
    BIND(
        (?a/?b) * 60
        AS ?calculatedVRate
    ),

    BIND(
        IF(
            ?calculatedVRate >= -3000 && ?calculatedVRate <= -1400,
            1,
            0
        ) 
        AS ?indicator
    ).

# TODO: MISSING speed
[?flight, :expediteDescend, ?indicator] :-
    [?airspace, ax:geometryComponent, ?sector],
    [?flight, :withinSector, ?sector],

    [?flight, :currentElement, ?currElement],
    [?currElement, fx:point4D, ?currPoint4D],
    [?currPoint4D, fx:level, ?currLevel],
    [?currLevel, fb:flightLevel, ?currFL],
    [?currPoint4D, fx:predictedAirspeed, ?currSpeed],

    [?flight, :agreedElement, ?clearedElement],
    [?clearedElement, fx:point4D, ?clearedPoint4D],
    [?clearedPoint4D, fx:level, ?clearedLevel],
    [?clearedLevel, fb:flightLevel, ?clearedFL],

    [?flight, fx:enRoute, ?enRoute],
    [?enRoute, fx:boundaryCrossingCoordination, ?boundaryCrossingCoordination],
    [?boundaryCrossingCoordination, fx:level, ?exitLevel],
    [?exitLevel, fb:flightLevel, ?exitFL],

    [?flight, :distanceToExitPoint, ?distToExitPoint],

    BIND(
        IF(
            ?exitFL = 0,
            ?clearedFL,
            ?exitFL
        )
        AS ?sectorExitFL
    ),
    BIND(
        ?sectorExitFL - ?currFL
        AS ?a
    ),
    BIND(
        ?currSpeed * 0.514444444
        AS ?currSpeedInMS
    ),
    BIND(
        ?distToExitPoint/?currSpeedInMS
        AS ?b
    ),
    BIND(
        (?a/?b) * 60
        AS ?calculatedVRate
    ),

    BIND(
        IF(
           ?calculatedVRate < -3000,
            1,
            0
        ) 
        AS ?indicator
    ).